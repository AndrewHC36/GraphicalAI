from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~

from typing import List

import math

from PySide6.QtWidgets import *
from PySide6.QtCore import QRectF, QSize, Qt
from PySide6.QtGui import QPalette, QIntValidator

from node_state import NodeState


class ComponentDescrp:
    w: QWidget = None  # deferred initiation of the internal widget of the component

    def activate_widget(self):
        raise NotImplementedError()

    def value(self):
        raise NotImplementedError()

    def serialize(self):
        raise NotImplementedError()

    def deserialize(self, dt):
        raise NotImplementedError()

    def bin_serialize(self):
        raise NotImplementedError()

    @staticmethod
    def bin_deserialize(bdt):
        raise NotImplementedError()


# TODO: change how the (const) components work
class InteractiveComponent(QGraphicsProxyWidget):
    def __init__(self, cc: ComponentDescrp, size: tuple, parent=None):
        super().__init__(parent=parent)
        self.cc = cc
        self.ctag = self.cc.__class__.__name__

        self.cc.activate_widget()

        try:
            self.cc.w.setMinimumSize(QSize(size[0]-1, size[1]-1))
            self.cc.w.setMaximumSize(QSize(size[0]-1, size[1]-1))
        except Exception as e:
            dprint(f"debug: self.cc is {self.cc} with type of {type(self.cc)}")
            dprint("suggestion: if the type of the self.cc is some internal type, "
                  "check nodes.py file which node is causing this")
            raise e

        self.setWidget(self.cc.w)

    def value(self):  # values used in execution to replace the constant classes with their value
        return self.cc.value()

    def serialize(self):
        return self.cc.serialize()

    def deserialize(self, dt):
        self.cc.deserialize(dt)

    def bin_serialize(self) -> bytes:
        sdt = self.cc.bin_serialize()
        if type(sdt) == bytes: return sdt
        else:
            dprint("debug:", self.cc)
            raise TypeError("debug: binary serialization expected to return bytes")


class IntLineInput(ComponentDescrp):
    """
    A single line input where the user can type in arbitrary numbers (integer only line input)
    """

    def __init__(self, default: int):
        self.default_num: int = default

    def activate_widget(self):
        self.w = QLineEdit()
        self.w.setValidator(QIntValidator())
        self.w.setStyleSheet("background-color: #CCFFFF")
        self.w.setText(str(self.default_num))

    def value(self):
        return int(self.w.text())

    def serialize(self):
        return self.w.text()

    def deserialize(self, dt):
        self.w.setText(dt)

    def bin_serialize(self):
        return int(self.w.text()).to_bytes(int(math.log2(int(self.w.text()))//8 + 1), "big")

    @staticmethod
    def bin_deserialize(bdt):
        return int.from_bytes(bdt, "big")


class LineInput(ComponentDescrp):
    """
    A single line input where the user can type in anything
    """

    def __init__(self, default: str, parent=None):
        self.default: str = default

    def activate_widget(self):
        self.w = QLineEdit()
        self.w.setText(self.default)

    def value(self):
        return self.w.text()

    def serialize(self):
        return self.w.text()

    def deserialize(self, dt):
        self.w.setText(dt)

    def bin_serialize(self):
        if len(self.w.text()) != 0: return self.w.text().encode("ASCII")
        else: return b"\x05"  # to signify the input field is empty

    @staticmethod
    def bin_deserialize(bdt):
        if bdt != b"\x05": return bdt.decode("ASCII")
        else: return ""


class ComboBox(ComponentDescrp):
    """
    A combo box where the users can select the pre-defined items of the drop-down list
    """

    def __init__(self, selc: list):
        self.selc = selc  # selections

    def activate_widget(self):
        self.w = QComboBox()
        for s in self.selc:
            self.w.addItem(s)

    def value(self):  # just useless
        return 0

    def serialize(self):
        return self.w.currentText()

    def deserialize(self, dt):
        self.w.setCurrentText(dt)

    def bin_serialize(self):
        return self.w.currentText().encode("ASCII")

    @staticmethod
    def bin_deserialize(bdt):
        return bdt.decode("ASCII")


class CheckBox(ComponentDescrp):
    """
    A check box where the users can check/toggle
    """

    def __init__(self, default=False, parent=None):
        self.check = default

    def activate_widget(self):
        self.w = QCheckBox()
        self.w.setStyleSheet("background-color: transparent")
        if self.check: self.w.setChecked(Qt.Checked)

    def value(self):
        return self.w.checkState() == Qt.Checked

    def serialize(self):
        return self.w.checkState() == Qt.Checked

    def deserialize(self, dt):
        if dt: self.w.setCheckState(Qt.Checked)
        else: self.w.setCheckState(Qt.Unchecked)

    def bin_serialize(self):
        return b"\xff" if self.w.checkState() == Qt.Checked else b"\x00"

    @staticmethod
    def bin_deserialize(bdt):
        if bdt == b"\xff": return True
        else: return False


class AttributeSelector(ComponentDescrp):
    """
    A specific type of widget that allows the users to select variables from where variables are defined separately
    """

    def __init__(self, type: NodeState):
        self.type = type

    def activate_widget(self):
        self.w = QComboBox()
        if self.type == NodeState.INPUT:
            self.w.setStyleSheet("background-color: #CCFFCC")
        elif self.type == NodeState.OUTPUT:
            self.w.setStyleSheet("background-color: #FFFFCC")

    def update_attr_lists(self, attrs: List[str]):
        self.w.clear()
        for attr in attrs:
            self.w.addItem(attr)

    def value(self):
        return self.w.currentText()

    def serialize(self):
        return self.w.currentText()

    def deserialize(self, dt):
        self.w.setCurrentText(dt)

    def bin_serialize(self):
        return self.w.currentText().encode("ASCII")

    @staticmethod
    def bin_deserialize(bdt):
        return bdt.decode("ASCII")


class MultiComboBox(ComponentDescrp):
    """
    A combo box that allows users to select multiple options under the combo box
    """

    def __init__(self):
        pass

    def activate_widget(self):
        self.w = QComboBox()

    def value(self):
        return 0

    def serialize(self):
        return "<None>"

    def deserialize(self, dt):
        dprint(dt)

    def bin_serialize(self):
        return b"\x00Null"

    @staticmethod
    def bin_deserialize(bdt):
        dprint(bdt)
        return bdt

