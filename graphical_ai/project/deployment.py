from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~

from typing import List, Optional
import requests

from PySide6.QtWidgets import *
from PySide6.QtCore import Slot, Signal
from PySide6.QtGui import *

from file_handler import ProjectFileHandler
from model_view.node import FasterNode
from node_state import NodeState
from project.model_component import Model
from project.sidemenu_components import ModelIOConfigurator, IOField


class DeploymentSideMenu(QWidget):
    sg_model_predict = Signal()
    sg_model_deploy = Signal()

    def __init__(self, model_name, io_config=None, parent=None):
        super().__init__(parent=parent)

        self.model_name = model_name
        self.model_key: Optional[str] = None

        self.wl_mdl_name = QLabel(model_name)
        ql_font: QFont = self.wl_mdl_name.font()
        ql_font.setPointSize(24)
        ql_font.setBold(True)
        self.wl_mdl_name.setFont(ql_font)

        qle_url_label = QLabel("URL: ")
        self.qle_url = QLineEdit("http://127.0.0.1:5000/")

        lyt_url = QHBoxLayout()
        lyt_url.addWidget(qle_url_label)
        lyt_url.addWidget(self.qle_url)

        qle_model_id_label = QLabel("Model ID:")
        self.qle_model_id = QLineEdit("")
        self.qle_model_id.setReadOnly(True)
        self.qle_model_id.setStyleSheet("background-color: #DDDDDD")

        lyt_id = QHBoxLayout()
        lyt_id.addWidget(qle_model_id_label)
        lyt_id.addWidget(self.qle_model_id)

        qpb_predict = QPushButton("Predict")
        qpb_predict.released.connect(lambda: self.sg_model_predict.emit())

        qpb_deploy = QPushButton("Deploy")
        qpb_deploy.released.connect(lambda: self.sg_model_deploy.emit())

        self.wx_io_config = io_config if not None else ModelIOConfigurator()

        lyt_left_menu = QVBoxLayout()
        lyt_left_menu.addWidget(self.wl_mdl_name, 1)
        lyt_left_menu.addWidget(qpb_predict, 1)
        lyt_left_menu.addWidget(qpb_deploy, 1)
        lyt_left_menu.addLayout(lyt_url, 1)
        lyt_left_menu.addLayout(lyt_id, 1)
        lyt_left_menu.addWidget(QLabel("Model I/O configurator"), 1)
        lyt_left_menu.addWidget(self.wx_io_config, 14)
        # lyt_left_menu.addWidget(QLabel("Console I/O"), 1)
        # lyt_left_menu.addWidget(ConsoleIO(), 7)

        self.setLayout(lyt_left_menu)


class DeploymentPage(QWidget):
    def __init__(self, fhndl: ProjectFileHandler, models: List[Model], io_configs_train: List[ModelIOConfigurator], io_configs_pred: List[ModelIOConfigurator], parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.deployment_sidemenus: List[DeploymentSideMenu] = []
        self.models = models
        self.io_configs_pred = io_configs_pred
        self.wtw_static_tabs = QTabWidget()

        lyt_main = QHBoxLayout()
        lyt_main.addWidget(self.wtw_static_tabs)

        self.setLayout(lyt_main)

    @Slot()
    def sl_model_list_refresh(self):
        self.wtw_static_tabs.clear()
        self.deployment_sidemenus.clear()

        for model, io_config in zip(self.models, self.io_configs_pred):
            sidemenu = DeploymentSideMenu(model.name, io_config=io_config, parent=self)
            sidemenu.sg_model_predict.connect(self.sl_model_predict)
            sidemenu.sg_model_deploy.connect(self.sl_model_deploy)

            wx_model = QWidget()

            lyt_model = QHBoxLayout()
            lyt_model.addWidget(sidemenu, 3)
            lyt_model.addWidget(model.get_static_view(parent=wx_model), 7)

            wx_model.setLayout(lyt_model)

            self.deployment_sidemenus.append(sidemenu)
            self.wtw_static_tabs.addTab(wx_model, model.name)
            self.io_configs_pred.append(sidemenu.wx_io_config)

    @Slot()
    def sl_model_predict(self):
        dprint("PREDICTING MODEL")

        iof: IOField
        inst = {
            "inp": {iof.attr_name: iof.data
                    for iof in self.deployment_sidemenus[self.wtw_static_tabs.currentIndex()].wx_io_config.attributes
                    if iof.state == NodeState.INPUT},
            "out": {iof.attr_name: iof.data
                    for iof in self.deployment_sidemenus[self.wtw_static_tabs.currentIndex()].wx_io_config.attributes
                    if iof.state == NodeState.OUTPUT},
            "predicting?": True,
        }

        dprint(inst)

        nodes_inp = 0
        nodes_out = 0
        for item in self.models[self.wtw_static_tabs.currentIndex()].items():
            if isinstance(item, FasterNode):
                if item.node_state == NodeState.INPUT:
                    nodes_inp += 1
                elif item.node_state == NodeState.OUTPUT:
                    nodes_out += 1

        dprint(nodes_inp, nodes_out)
        #  TODO: temporary validation to check the model met a specific req for basic ai/ml
        if nodes_inp == nodes_out == 1:
            self.fhndl.predict_model(
                self.fhndl.get_mdl_id(self.models[self.wtw_static_tabs.currentIndex()].name),
                inst_state=inst,
            )
        else:
            dprint("PREDICTING REQUIREMENTS NOT FILLED")


    @Slot()
    def sl_model_deploy(self):
        model: Model = self.models[self.wtw_static_tabs.currentIndex()]
        depl_sm: DeploymentSideMenu = self.deployment_sidemenus[self.wtw_static_tabs.currentIndex()]
        dprint(f"Model deploy <{model.name}>")
        dprint(f"{depl_sm.qle_url.text()}/create_model")

        if depl_sm.model_key is None:
            resp_creation = requests.get(depl_sm.qle_url.text()+"/create_model")
            depl_sm.model_key = resp_creation.json()["model-id"]

            dprint(f"requested result {resp_creation} {resp_creation.json()}")

            depl_sm.qle_model_id.setText(depl_sm.model_key)

        req_attrs = self.fhndl.get_mdl_req_attr(self.fhndl.get_mdl_id(model.name))

        resp_save = requests.post(depl_sm.qle_url.text()+"/save_model/"+depl_sm.model_key, json={
            "name": depl_sm.model_name,
            "path": self.fhndl.get_mdl_path(self.fhndl.get_mdl_id(model.name)),
            "req-inp": req_attrs["INPUT"],
            "req-out": req_attrs["OUTPUT"],
            "ret-inp": {},
            "ret-out": {},
        })

        dprint(f"responded post {resp_save}")

