from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~

from typing import List

from PySide6.QtWidgets import *
from PySide6.QtCore import Slot, Signal
from PySide6.QtGui import *

from file_handler import ProjectFileHandler
from project import Model
from project.sidemenu_components import ModelIOConfigurator, ConsoleIO

import requests


class DeploymentSideMenu(QWidget):
    sg_model_predict = Signal()
    sg_model_deploy = Signal()

    def __init__(self, model_name, parent=None):
        super().__init__(parent=parent)

        self.model_name = model_name

        self.wl_mdl_name = QLabel(model_name)
        ql_font: QFont = self.wl_mdl_name.font()
        ql_font.setPointSize(24)
        ql_font.setBold(True)
        self.wl_mdl_name.setFont(ql_font)

        qle_url_label = QLabel("URL: ")
        self.qle_url = QLineEdit("http://127.0.0.1:5000/")

        lyt_url = QHBoxLayout()
        lyt_url.addWidget(qle_url_label)
        lyt_url.addWidget(self.qle_url)

        qle_model_id_label = QLabel("Model ID:")
        self.qle_model_id = QLineEdit("")
        self.qle_model_id.setReadOnly(True)
        self.qle_model_id.setStyleSheet("background-color: #DDDDDD")

        lyt_id = QHBoxLayout()
        lyt_id.addWidget(qle_model_id_label)
        lyt_id.addWidget(self.qle_model_id)

        qpb_predict = QPushButton("Predict")
        qpb_predict.released.connect(lambda: self.sg_model_predict.emit())

        qpb_deploy = QPushButton("Deploy")
        qpb_deploy.released.connect(lambda: self.sg_model_deploy.emit())

        self.wx_io_config = ModelIOConfigurator()

        lyt_left_menu = QVBoxLayout()
        lyt_left_menu.addWidget(self.wl_mdl_name, 1)
        lyt_left_menu.addWidget(qpb_deploy, 1)
        lyt_left_menu.addLayout(lyt_url, 1)
        lyt_left_menu.addLayout(lyt_id, 1)
        lyt_left_menu.addWidget(QLabel("Model I/O configurator"), 1)
        lyt_left_menu.addWidget(self.wx_io_config, 7)
        lyt_left_menu.addWidget(QLabel("Console I/O"), 1)
        lyt_left_menu.addWidget(ConsoleIO(), 7)

        self.setLayout(lyt_left_menu)


class DeploymentPage(QWidget):
    def __init__(self, fhndl: ProjectFileHandler, models: List[Model], io_configs: List[ModelIOConfigurator], parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.deployment_sidemenus: List[DeploymentSideMenu] = []
        self.models = models
        self.io_configs = io_configs
        self.wtw_static_tabs = QTabWidget()

        lyt_main = QHBoxLayout()
        lyt_main.addWidget(self.wtw_static_tabs)

        self.setLayout(lyt_main)

    @Slot()
    def sl_model_list_refresh(self):
        self.wtw_static_tabs.clear()
        self.deployment_sidemenus.clear()

        for ind, model in enumerate(self.models):
            sidemenu = DeploymentSideMenu(model.name, parent=self)
            sidemenu.sg_model_predict.connect(self.sl_model_predict)
            sidemenu.sg_model_deploy.connect(self.sl_model_deploy)

            wx_model = QWidget()

            lyt_model = QHBoxLayout()
            lyt_model.addWidget(sidemenu, 3)
            lyt_model.addWidget(model.get_static_view(parent=wx_model), 7)

            wx_model.setLayout(lyt_model)

            # syncs up between either io_configs in the same corresponding model
            self.io_configs[ind].sg_sync.connect(sidemenu.wx_io_config.create_new_attr)
            sidemenu.wx_io_config.sg_sync.connect(self.io_configs[ind].create_new_attr)

            self.deployment_sidemenus.append(sidemenu)
            self.wtw_static_tabs.addTab(wx_model, model.name)

    @Slot()
    def sl_model_predict(self):
        dprint("PREDICTING MODEL")


    @Slot()
    def sl_model_deploy(self):
        model: Model = self.models[self.wtw_static_tabs.currentIndex()]
        qle_url: QLineEdit = self.deployment_sidemenus[self.wtw_static_tabs.currentIndex()].qle_url
        qle_model_id: QLineEdit = self.deployment_sidemenus[self.wtw_static_tabs.currentIndex()].qle_model_id
        dprint(f"Model deploy <{model.name}>")
        dprint(f"{qle_url.text()}/create_model")
        resp_creation = requests.get(qle_url.text()+"/create_model")
        model_id = resp_creation.json()["model-id"]

        dprint(f"requested result {resp_creation} {resp_creation.json()}")

        qle_model_id.setText(model_id)

        resp_save = requests.post(qle_url.text()+"/save_model/"+model_id, json={
            "name": "model-name",
            "inputs": {
                "dataset": "file",
            },
            "outputs": {
                "numbers": "file",
                "numbers2": "console",
            },
        })

        dprint(f"responded post {resp_save}")

