from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~

from typing import List
from PySide6.QtWidgets import *
from PySide6.QtCore import Slot, Signal
from PySide6.QtGui import QFont

from file_handler import ProjectFileHandler
from model_view.components import AttributeSelector
from node_state import NodeState
from project import Model
from project.sidemenu_components import ModelIOConfigurator, ConsoleIO


class TrainingSideMenu(QWidget):
    sg_model_train = Signal()

    def __init__(self, model_name, parent=None):
        super().__init__(parent=parent)

        self.model_name = model_name

        self.wl_mdl_name = QLabel(model_name)
        ql_font: QFont = self.wl_mdl_name.font()
        ql_font.setPointSize(24)
        ql_font.setBold(True)
        self.wl_mdl_name.setFont(ql_font)

        qpb_train = QPushButton("Train")
        qpb_train.pressed.connect(lambda: self.sg_model_train.emit())

        self.wx_io_config = ModelIOConfigurator()

        lyt_left_menu = QVBoxLayout()
        lyt_left_menu.addWidget(self.wl_mdl_name, 1)
        lyt_left_menu.addWidget(qpb_train, 1)
        lyt_left_menu.addWidget(QLabel("Model I/O configurator"), 1)
        lyt_left_menu.addWidget(self.wx_io_config, 8)
        lyt_left_menu.addWidget(QLabel("Console I/O"), 1)
        lyt_left_menu.addWidget(ConsoleIO(), 8)

        self.setLayout(lyt_left_menu)


class TrainingPage(QWidget):
    """
    Execution page is where you are allow to execute the specified model. It has Model I/O configurator and
    in-app console I/O if the model specifies it.
    """

    def __init__(self, fhndl: ProjectFileHandler, models: List[Model], io_configs: List[ModelIOConfigurator], parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.training_sidemenus: List[TrainingSideMenu] = []
        self.models = models
        self.io_configs = io_configs
        self.wtw_static_tabs = QTabWidget()

        lyt_main = QHBoxLayout()
        lyt_main.addWidget(self.wtw_static_tabs)

        self.setLayout(lyt_main)

    @Slot()
    def sl_model_list_refresh(self):
        self.wtw_static_tabs.clear()
        self.training_sidemenus.clear()

        for model in self.models:
            sidemenu = TrainingSideMenu(model.name, parent=self)
            sidemenu.sg_model_train.connect(self.sl_model_train)
            sidemenu.wx_io_config.sg_attrs_updated.connect(self.sl_attr_selcs_update)

            wx_model = QWidget()

            lyt_model = QHBoxLayout()
            lyt_model.addWidget(sidemenu, 3)
            lyt_model.addWidget(model.get_static_view(parent=wx_model), 7)

            wx_model.setLayout(lyt_model)

            self.training_sidemenus.append(sidemenu)
            self.io_configs.append(sidemenu.wx_io_config)
            self.wtw_static_tabs.addTab(wx_model, model.name)

    @Slot()
    def sl_attr_selcs_update(self):
        input_names = self.training_sidemenus[self.wtw_static_tabs.currentIndex()].wx_io_config.get_attr_inp_names()
        output_names = self.training_sidemenus[self.wtw_static_tabs.currentIndex()].wx_io_config.get_attr_out_names()

        attr_selc: AttributeSelector
        for attr_selc in self.models[self.wtw_static_tabs.currentIndex()].attr_selcs:
            if attr_selc.type == NodeState.INPUT:
                attr_selc.update_attr_lists(input_names)
            elif attr_selc.type == NodeState.OUTPUT:
                attr_selc.update_attr_lists(output_names)


    @Slot()
    def sl_model_train(self):
        dprint("MODEL TRAIN", self.models[self.wtw_static_tabs.currentIndex()].name)
        self.fhndl.train_model(self.fhndl.get_mdl_id(self.models[self.wtw_static_tabs.currentIndex()].name))

