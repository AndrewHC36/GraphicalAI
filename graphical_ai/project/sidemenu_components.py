from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~

from typing import List, Dict, Optional, Tuple
from enum import Enum

from PySide6.QtWidgets import *
from PySide6.QtCore import Slot, Signal, QFile, QCoreApplication
from PySide6.QtGui import QFont, QPixmap, QImageReader, QIcon

from node_state import NodeState
import errors

APP_ROOT = "C:/users/andrew shen/desktop/graphicalai-ii"


class NewAttributeDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.input_name = None
        self.input_type = None
        self.input_ok = None

        self.setWindowTitle("Creating New Attribute")
        self.setModal(True)

        self.qle_name = QLineEdit("")

        self.qcb_types = QComboBox()
        self.qcb_types.addItem("Input")
        self.qcb_types.addItem("Output")

        lyt_form = QFormLayout()
        lyt_form.addRow(QLabel("Name:"), self.qle_name)
        lyt_form.addRow(QLabel("Type:"), self.qcb_types)

        qpb_ok = QPushButton("OK")
        qpb_cancel = QPushButton("Cancel")
        qpb_ok.released.connect(lambda: self.set_input(QDialog.Accepted))
        qpb_cancel.released.connect(lambda: self.set_input(QDialog.Rejected))

        lyt_exit = QHBoxLayout()
        lyt_exit.addWidget(qpb_ok)
        lyt_exit.addWidget(qpb_cancel)

        lyt_main = QVBoxLayout()
        lyt_main.addLayout(lyt_form)
        lyt_main.addLayout(lyt_exit)

        self.setLayout(lyt_main)

    def get_input(self) -> (str, NodeState, bool):
        self.exec_()
        return self.input_name, self.input_type, self.input_ok

    def set_input(self, code: int):
        self.input_name = self.qle_name.text()
        self.input_type = NodeState.INPUT if self.qcb_types.currentText() == "Input" else NodeState.OUTPUT
        self.input_ok = True if code == self.Accepted else False

        self.done(code)


class FileConfigDialog(QDialog):
    def __init__(self, prev_data=(None,), parent=None):
        super().__init__(parent=parent)

        self.input_filename: Optional[str] = prev_data[0]
        self.input_ok: Optional[bool] = None

        self.setWindowTitle("File IO Configuration")
        self.setModal(True)

        self.qle_name = QLineEdit("")
        self.qle_name.setReadOnly(True)
        self.qle_name.setStyleSheet("background-color: #DDDDDD")
        if prev_data[0] is not None: self.qle_name.setText(self.input_filename)

        self.qpb_open_file = QPushButton()
        self.qpb_open_file.released.connect(self.sl_open_file)
        self.qpb_open_file.setIcon(QIcon(self.style().standardIcon(QStyle.SP_FileIcon)))

        lyt_filename = QHBoxLayout()
        lyt_filename.addWidget(self.qle_name)
        lyt_filename.addWidget(self.qpb_open_file)

        lyt_form = QFormLayout()
        lyt_form.addRow(QLabel("Filename:"), lyt_filename)

        qpb_ok = QPushButton("OK")
        qpb_cancel = QPushButton("Cancel")
        qpb_ok.released.connect(lambda: self.set_input(QDialog.Accepted, self.qle_name.text()))
        qpb_cancel.released.connect(lambda: self.set_input(QDialog.Rejected, self.qle_name.text()))

        lyt_exit = QHBoxLayout()
        lyt_exit.addWidget(qpb_ok)
        lyt_exit.addWidget(qpb_cancel)

        lyt_main = QVBoxLayout()
        lyt_main.addLayout(lyt_form)
        lyt_main.addLayout(lyt_exit)

        self.setLayout(lyt_main)

    def get_input(self) -> (str, bool, str):
        self.exec_()
        return self.input_filename, self.input_ok, "file"

    def set_input(self, code: int, fname: str):
        self.input_filename = fname
        self.input_ok = True if code == self.Accepted else False

        self.done(code)

    @Slot()
    def sl_open_file(self):
        (fpath, _filter) = QFileDialog.getOpenFileName(caption="Open File Location")
        if fpath != "":
            self.qle_name.setText(fpath)


class ConsoleConfigDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.input_ok: Optional[bool] = None

        self.setWindowTitle("Console IO Configuration")
        self.setModal(True)

        qpb_ok = QPushButton("OK")
        qpb_cancel = QPushButton("Cancel")
        qpb_ok.released.connect(lambda: self.set_input(QDialog.Accepted))
        qpb_cancel.released.connect(lambda: self.set_input(QDialog.Rejected))

        lyt_exit = QHBoxLayout()
        lyt_exit.addWidget(qpb_ok)
        lyt_exit.addWidget(qpb_cancel)

        lyt_main = QVBoxLayout()
        lyt_main.addWidget(QLabel("No additional parameter are needed for this as of now."))
        lyt_main.addLayout(lyt_exit)

        self.setLayout(lyt_main)

    def get_input(self) -> (bool, str):
        self.exec_()
        return self.input_ok, "console"

    def set_input(self, code: int):
        self.input_ok = True if code == self.Accepted else False

        self.done(code)


class IOField(QWidget):
    sg_attr_name_changed = Signal()

    OPT_TYPES: Dict[str, type] = {
        "file": FileConfigDialog,
        "console": ConsoleConfigDialog,
    }

    def __init__(self, attr_name: str, state: NodeState, data: Tuple[str, str]=("", ""), parent=None):
        super().__init__(parent=parent)

        self.attr_name = attr_name
        self.state = state
        self.data: (str, str) = data  # (datatype, data)

        lyt_main = QHBoxLayout()

        state_txt = "ERROR TYPE"
        pixmap_label = QLabel()
        if self.state == NodeState.INPUT:
            state_txt = "Input"
            pixmap_label.setPixmap(QPixmap(APP_ROOT+"/res/arrow-left.png"))
        elif self.state == NodeState.OUTPUT:
            state_txt = "Output"
            pixmap_label.setPixmap(QPixmap(APP_ROOT+"/res/arrow-right.png"))

        wl_state = QLabel(state_txt)
        qf_state: QFont = wl_state.font()
        qf_state.setBold(True)
        qf_state.setPixelSize(10)
        wl_state.setFont(qf_state)

        self.qle_attr = QLineEdit(self.attr_name)
        self.qle_attr.setReadOnly(True)
        qf_attr: QFont = self.qle_attr.font()
        qf_attr.setPixelSize(14)
        self.qle_attr.setFont(qf_attr)
        self.qle_attr.setStyleSheet("background-color: #DDDDDD")

        wpb_change = QPushButton("Change")
        wpb_change.released.connect(self.sl_change_attribute)

        lyt_attr = QHBoxLayout()
        lyt_attr.addWidget(self.qle_attr)
        lyt_attr.addWidget(wpb_change)

        lyt_left = QVBoxLayout()
        lyt_left.addWidget(wl_state)
        lyt_left.addLayout(lyt_attr)

        self.qcb_opts = QComboBox()
        self.qcb_opts.addItems(list(IOField.OPT_TYPES))

        qpb_config = QPushButton("Open Config")
        qpb_config.released.connect(self.sl_open_config)

        lyt_right = QVBoxLayout()
        lyt_right.addWidget(self.qcb_opts)
        lyt_right.addWidget(qpb_config)

        lyt_main.addLayout(lyt_left)
        lyt_main.addWidget(pixmap_label)
        lyt_main.addLayout(lyt_right)

        self.setLayout(lyt_main)

    @Slot()
    def sl_change_attribute(self):
        (new_attr_name, ok) = QInputDialog.getText(self, f"Rename Attribute <{self.attr_name}>", "New Attribute Name:", QLineEdit.EchoMode.Normal)
        if ok:
            if len(new_attr_name) > 0 and str.isalnum(new_attr_name):
                self.qle_attr.setText(new_attr_name)
                self.attr_name = new_attr_name
            elif len(new_attr_name) > 0 and not str.isalnum(new_attr_name):
                raise errors.IOAttributeError(msg="", code=errors.IOAttributeError.ATTR_NAME_BAD_CHAR)
            else:
                raise errors.IOAttributeError(msg="", code=errors.IOAttributeError.ATTR_NAME_EMPTY)

    @Slot()
    def sl_open_config(self):
        dialog_cls = IOField.OPT_TYPES[self.qcb_opts.currentText()]
        if dialog_cls == FileConfigDialog and self.data[0] == "file":
            ret = dialog_cls(prev_data=(self.data[1],)).get_input()
        else:
            ret = IOField.OPT_TYPES[self.qcb_opts.currentText()]().get_input()

        if ret[-1] == "file":
            self.data = (ret[-1], ret[0])
        elif ret[-1] == "console":
            self.data = (ret[-1], "")


class ModelIOConfigurator(QListWidget):
    """
    Icons made by "https://www.flaticon.com/authors/flat-icons"

    This class is included Training & Deployment page. The number of attribute and IO type are sync between them, but other
    configuration information are kept separately because one's for training and the other one is to predict. (So users
    may want a different datasets from different location)
    """
    sg_attrs_updated = Signal()  # (uses: updates the attr list in the AttributeSelector in model nodes QGraphicScene)
    sg_sync = Signal(str, NodeState)  # sync multiple ModelIOConfigurator object together (only for the same corresponding model on
    #                     training & deployment page)

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.attributes = []

        self.setStyleSheet("QListWidget::item { border-bottom: 1px solid black; }")
        self.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)

        add = QListWidgetItem()
        wpb_add = QPushButton("Add")
        wpb_add.released.connect(self.sl_new_attr)
        self.addItem(add)
        self.setItemWidget(add, wpb_add)
        add.setSizeHint(wpb_add.sizeHint())


    @Slot()
    def sl_new_attr(self):
        (attr_name, node_state, ok) = NewAttributeDialog().get_input()
        if ok:
            if len(attr_name) > 0 and str.isalnum(attr_name):
                self.create_new_attr(attr_name, node_state)
                self.sg_attrs_updated.emit()
                self.sg_sync.emit(attr_name, node_state)
            elif len(attr_name) > 0 and not str.isalnum(attr_name):
                raise errors.IOAttributeError(msg="", code=errors.IOAttributeError.ATTR_NAME_BAD_CHAR)
            else:
                raise errors.IOAttributeError(msg="", code=errors.IOAttributeError.ATTR_NAME_EMPTY)

    @Slot(str, NodeState)
    def create_new_attr(self, attr_name: str, node_state: NodeState, data=("", "")):
        qlwi_attr = QListWidgetItem()
        attribute = IOField(attr_name, node_state, data=data)
        self.addItem(qlwi_attr)
        self.attributes.append(attribute)
        self.setItemWidget(qlwi_attr, attribute)
        qlwi_attr.setSizeHint(attribute.sizeHint())

    def get_attr_inp_names(self) -> List[str]:
        return [f.attr_name for f in self.attributes if f.state == NodeState.INPUT]

    def get_attr_out_names(self) -> List[str]:
        return [f.attr_name for f in self.attributes if f.state == NodeState.OUTPUT]


class ConsoleIO(QTextEdit):
    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.setLineWrapMode(QTextEdit.NoWrap)
        qf_console: QFont = self.font()
        qf_console.setFamily("Courier New")
        self.setFont(qf_console)

        self.append("LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONGGGGGGGGGGGGGGGGGGGGGGGGGGGG TEXXXXXXXXXXXXXXXXXXXXT")

