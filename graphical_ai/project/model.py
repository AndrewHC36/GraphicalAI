from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~ 
from PySide6.QtWidgets import *
from PySide6.QtCore import Slot
from PySide6.QtGui import *
from typing import List

from file_handler import ProjectFileHandler
from model_view.components import *
from project.model_component import Model
import errors


class ModelTabs(QTabWidget):
    """
    A class to help organize functionalities and data specifically for tabs of Model-s
    """

    def __init__(self, fhndl: ProjectFileHandler, parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.models: List[Model] = []
        self.setMovable(True)

        # TODO: perhaps in the future, we should replace the text with an icon so its more easily viewable
        self.qpb_new_model = QPushButton("+")
        self.qpb_new_model.released.connect(self.sl_add_new_model_tab)
        self.setCornerWidget(self.qpb_new_model, Qt.Corner.TopLeftCorner)

        if len(self.fhndl.get_mdl_refs()) > 0:
            for mdl_id in self.fhndl.get_mdl_refs():
                model: Model = self.fhndl.load_model(mdl_id, parent=self)
                self.add_model(model)

        dprint("model tab counts:", self.count(), self.count() == 0)
        if self.count() == 0:  # if there are no models loaded, then add a default unnamed model
            self.add_model(Model("unnamed", parent=self))

        # sets current active tab to the first tab,
        # specifically to avoid starting with the supposedly inaccessible "+" tab
        self.setCurrentIndex(0)

    def add_model(self, model: Model):
        model.sg_rename_mdl.connect(self.sl_rename_cur_model)
        model.sg_del_mdl.connect(self.sl_del_cur_model)
        model.sg_exec_mdl.connect(self.sl_exec_cur_model)
        model.sg_save_mdl.connect(self.sl_save_cur_model)
        self.models.append(model)
        self.insertTab(0, model, model.name)

    def current_model(self) -> Model:
        return self.widget(self.currentIndex())

    def current_model_rename(self, name):
        self.setTabText(self.currentIndex(), name)

    def rem_model(self, model_name: str):
        pass

    @Slot(int)
    def sl_add_new_model_tab(self):
        (model_txt, ok) = QInputDialog.getText(self, "Enter Model Name", "Model Name:", QLineEdit.EchoMode.Normal)
        dprint(ok, model_txt, len(model_txt) != 0)
        if ok:
            if len(model_txt) > 0 and Model.model_name_check(model_txt):
                self.add_model(Model(model_txt, parent=self))
            elif len(model_txt) > 0 and not Model.model_name_check(model_txt):
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_BAD_CHAR)
            else:
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_EMPTY)

    @Slot()
    def sl_save_cur_model(self):
        model: Model = self.current_model()
        dprint("saving current model:", model.name, model, self.currentIndex())
        try:
            self.fhndl.save_model(self.fhndl.get_mdl_id(model.name), model)  # TODO: file handler expecting model workspace, not the new model class
        except errors.ProjectFileAppError as e:
            if e.code == errors.ProjectFileAppError.MDL_NAME_NON_EXISTENT:
                self.fhndl.save_model(self.fhndl.new_mdl_id(model.name), model)  # TODO: file handler expecting model workspace, not the new model class
            else:
                raise e

    @Slot()
    def sl_del_cur_model(self):
        dprint("Deleting model does nothing right now")

    @Slot()
    def sl_exec_cur_model(self):
        model: Model = self.current_model()
        self.fhndl.execute_model(self.fhndl.get_mdl_id(model.name))

    @Slot(str)
    def sl_rename_cur_model(self, model_new_name: str):
        print(self.tabText(self.currentIndex()))
        self.fhndl.change_mdl_name(self.fhndl.get_mdl_id(self.tabText(self.currentIndex())), model_new_name)
        self.current_model_rename(model_new_name)

        # (mdl_txt, ok) = QInputDialog.getText(self, "Enter Model Name", "Mode Name:")
        # if ok and len(mdl_txt) != 0:
        #     # mdl_workspace.
        #     dprint("RENAME CURRENT MODEL", model.name, mdl_txt)
        #     # mdl_workspace.model_name = mdl_txt


class ModelPage(QWidget):
    """
    This page allows you to edit, create, delete models and use individual nodes to customize your models.
    """

    def __init__(self, fhndl: ProjectFileHandler, parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.model_tabs = ModelTabs(self.fhndl)

        # TODO: since the sidemenu changes for each different model, find a way to change the widgets in the layout
        lyt_main = QHBoxLayout()
        lyt_main.addWidget(self.model_tabs)

        self.setLayout(lyt_main)
