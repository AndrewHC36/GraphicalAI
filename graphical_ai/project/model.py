from __base__ import *  # ~~~ automatically generated by __autoinject__.py ~~~ 

from typing import List, Tuple

from PySide6.QtWidgets import *
from PySide6.QtCore import Slot, Signal
from PySide6.QtGui import *

from file_handler import ProjectFileHandler
from model_view.components import *
from node_graph.nodes import export
from project.model_component import Model
import errors


class ModelSideMenu(QWidget):
    sg_node_selc = Signal(str, str)
    sg_save_mdl = Signal()
    sg_del_mdl = Signal()
    sg_exec_mdl = Signal()
    sg_clear_mdl = Signal()
    sg_rename_mdl = Signal()

    def __init__(self, model_name, parent=None):
        super().__init__(parent=parent)

        self.model_name = model_name

        wtw_nodes_selc = QTreeWidget(parent=self)
        wtw_nodes_selc.itemDoubleClicked.connect(self.sl_node_selc)
        wtw_nodes_selc.setHeaderHidden(True)
        wtw_nodes_selc.setIndentation(10)

        for top in export:
            wx_top = QTreeWidgetItem([top])
            for inner in export[top]:
                _wx_inner = QTreeWidgetItem(wx_top, [inner])
            wtw_nodes_selc.addTopLevelItem(wx_top)

        self.wl_mdl_name = QLabel(model_name)
        ql_font: QFont = self.wl_mdl_name.font()
        ql_font.setPointSize(24)
        ql_font.setBold(True)
        self.wl_mdl_name.setFont(ql_font)

        wb_mdl_saved = QPushButton("Save Model")
        wb_mdl_saved.clicked.connect(lambda _checked: self.sg_save_mdl.emit())
        wb_mdl_clear = QPushButton("Clear Model")
        wb_mdl_clear.clicked.connect(lambda _checked: self.sg_clear_mdl.emit())
        wb_mdl_exec = QPushButton("Execute Model")
        wb_mdl_exec.clicked.connect(lambda _checked: self.sg_exec_mdl.emit())
        wb_mdl_rename = QPushButton("Rename Model")
        wb_mdl_rename.clicked.connect(lambda _checked: self.sg_rename_mdl.emit())
        wb_mdl_del = QPushButton("Delete Model")
        wb_mdl_del.clicked.connect(lambda _checked: self.sg_del_mdl.emit())

        lyt_main = QVBoxLayout()
        lyt_main.addWidget(self.wl_mdl_name)
        lyt_main.addWidget(wb_mdl_saved)
        lyt_main.addWidget(wb_mdl_clear)
        lyt_main.addWidget(wb_mdl_exec)
        lyt_main.addWidget(wb_mdl_rename)
        lyt_main.addWidget(wb_mdl_del)
        lyt_main.addWidget(wtw_nodes_selc)

        self.setLayout(lyt_main)

    @Slot(object, int)
    def sl_node_selc(self, item, _column):
        if item.parent() is not None:  # check if item is child, not top-level
            self.sg_node_selc.emit(item.parent().text(0), item.text(0))


class ModelTabs(QTabWidget):
    """
    A class to help organize functionalities and data specifically for tabs of Model-s
    """
    sg_model_list_refresh = Signal()

    def __init__(self, fhndl: ProjectFileHandler, ref_models_list: List[Model], parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.models = ref_models_list
        self.model_sidemenus: List[ModelSideMenu] = []

        self.setMovable(True)

        # TODO: perhaps in the future, we should replace the text with an icon so its more easily viewable
        self.qpb_new_model = QPushButton("+")
        self.qpb_new_model.released.connect(self.sl_add_new_model_tab)
        self.setCornerWidget(self.qpb_new_model, Qt.Corner.TopLeftCorner)

        if len(self.fhndl.get_mdl_refs()) > 0:
            for mdl_id in self.fhndl.get_mdl_refs():
                model: Model = self.fhndl.load_model(mdl_id, parent=self)
                self.add_model(model, load=True)

        if self.count() == 0:  # if there are no models loaded, then add a default unnamed model
            self.add_model(Model("unnamed", parent=self))

        # sets current active tab to the first tab,
        # specifically to avoid starting with the supposedly inaccessible "+" tab
        self.setCurrentIndex(0)

    def add_model(self, model: Model, load: bool = False):
        """
        Adds the model to the inter model list between different pages and to be added to the model page itself.
        NOTE: Does not *create* the model itself.

        load kwarg means whether the model being added has been loaded from file or it is newly created model.
        """

        model.sg_model_temp_rename.connect(self.current_model_tab_rename)  # when updated, adds the asterisk

        sidemenu = ModelSideMenu(model.name, parent=self)
        sidemenu.sg_node_selc.connect(model.sl_add_node)  # wx_first_mdl.sl_add_node)
        sidemenu.sg_save_mdl.connect(self.sl_save_cur_model)
        sidemenu.sg_del_mdl.connect(self.sl_del_cur_model)
        sidemenu.sg_exec_mdl.connect(self.sl_exec_cur_model)
        sidemenu.sg_clear_mdl.connect(model.sl_clear_model)
        sidemenu.sg_rename_mdl.connect(self.sl_rename_cur_model)

        wx_model = QWidget()

        lyt_model = QHBoxLayout()
        lyt_model.addWidget(sidemenu, 15)
        lyt_model.addWidget(model.get_active_view(parent=wx_model), 70)
        lyt_model.addWidget(QLabel("Minimizable \n Inspection page"), 10)

        wx_model.setLayout(lyt_model)

        self.models.insert(0, model)
        self.model_sidemenus.insert(0, sidemenu)
        if not load:
            self.insertTab(0, wx_model, "*"+model.name)
        else:
            self.insertTab(0, wx_model, model.name)

        self.setCurrentIndex(0)

    # def add_old_model(self, model: OldModel):
    #     model.sg_rename_mdl.connect(self.sl_rename_cur_model)
    #     model.sg_del_mdl.connect(self.sl_del_cur_model)
    #     model.sg_exec_mdl.connect(self.sl_exec_cur_model)
    #     model.sg_save_mdl.connect(self.sl_save_cur_model)
    #     self.models.append(model)
    #     self.insertTab(0, model, model.name)

    def current_model(self) -> Model:
        return self.models[self.currentIndex()]

    def current_model_sidemenu(self) -> ModelSideMenu:
        return self.model_sidemenus[self.currentIndex()]

    def current_model_tab_rename(self, name):
        self.setTabText(self.currentIndex(), name)

    def current_model_tab_name(self):
        return self.tabText(self.currentIndex())

    def rem_model(self, model_name: str):
        pass

    @Slot(int)
    def sl_add_new_model_tab(self):
        model_txt, ok = QInputDialog.getText(self, "Enter Model Name", "Model Name:", QLineEdit.EchoMode.Normal)
        dprint(ok, model_txt, len(model_txt) != 0)
        if ok:
            if len(model_txt) > 0 and Model.name_check(model_txt):
                self.add_model(Model(model_txt, parent=self))
            elif len(model_txt) > 0 and not Model.name_check(model_txt):
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_BAD_CHAR)
            else:
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_EMPTY)
        self.sg_model_list_refresh.emit()

    @Slot()
    def sl_save_cur_model(self):
        model = self.current_model()
        model.saved = True
        self.current_model_tab_rename(model.name)  # removes the asterisk
        dprint("saving current model:", model.name, model, self.currentIndex())
        try:
            self.fhndl.save_model(self.fhndl.get_mdl_id(model.name), model)
        except errors.ProjectFileAppError as e:
            if e.code == errors.ProjectFileAppError.MDL_NAME_NON_EXISTENT:
                model.has_model_id = True
                self.fhndl.save_model(self.fhndl.new_mdl_id(model.name), model)
            else:
                raise e

    @Slot()
    def sl_del_cur_model(self):
        dprint("Deleting model does nothing right now")
        self.sg_model_list_refresh.emit()

    @Slot()
    def sl_exec_cur_model(self):
        model = self.current_model()
        self.fhndl.predict_model(self.fhndl.get_mdl_id(model.name))

    @Slot(str)
    def sl_rename_cur_model(self):
        (new_name, ok) = QInputDialog.getText(self, "Enter Model Name", "Mode Name:", QLineEdit.EchoMode.Normal)
        if ok:
            if len(new_name) > 0 and Model.name_check(new_name):
                print(self.tabText(self.currentIndex()))

                model = self.current_model()
                sidemenu = self.current_model_sidemenu()

                model.name = new_name
                sidemenu.model_name = new_name
                sidemenu.wl_mdl_name.setText(new_name)

                if model.has_model_id:
                    self.fhndl.change_mdl_name(self.fhndl.get_mdl_id(self.tabText(self.currentIndex())), new_name)
                if self.current_model_tab_name()[0] == "*":
                    self.current_model_tab_rename("*"+new_name)  # rename model w/ asterisk
                else:
                    self.current_model_tab_rename(new_name)  # rename model
                self.sg_model_list_refresh.emit()
            elif len(new_name) > 0 and not Model.name_check(new_name):
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_BAD_CHAR)
            else:
                raise errors.ProjectUIError(msg="", code=errors.ProjectUIError.MDL_NAME_EMPTY)


class ModelPage(QWidget):
    """
    This page allows you to edit, create, delete models and use individual nodes to customize your models.
    """

    def __init__(self, fhndl: ProjectFileHandler, ref_models_list: List[Model], parent=None):
        super().__init__(parent=parent)

        self.fhndl = fhndl
        self.model_tabs = ModelTabs(self.fhndl, ref_models_list)

        # TODO: since the sidemenu changes for each different model, find a way to change the widgets in the layout
        lyt_main = QHBoxLayout()
        lyt_main.addWidget(self.model_tabs)

        self.setLayout(lyt_main)
